# -*- coding: utf-8 -*-
# Generated by Django 1.10.8 on 2017-10-17 07:57
from __future__ import unicode_literals

from django.db import migrations, models, connection
from django.core.files import File


from bluebottle.clients import properties
from bluebottle.clients.models import Client
from bluebottle.clients.utils import LocalTenant


def create_homepage(apps, schema_editor):
    Placeholder = apps.get_model('fluent_contents', 'Placeholder')
    ContentType = apps.get_model('contenttypes', 'ContentType')
    HomePage = apps.get_model('cms', 'HomePage')
    HomePage.__bases__ = (models.Model, )

    def create_block(block_type, block, placeholder, language):
        model = apps.get_model('cms', block_type)
        content_type = ContentType.objects.get_for_model(model)

        content_block = model.objects.create_for_placeholder(
            placeholder,
            polymorphic_ctype=content_type,  # This does not get set automatically in migrations
            language_code=language,
            **block['kwargs']
        )

        if 'items' in block:
            item_model = apps.get_model('cms', block['items']['model'])
            for item in block['items']['data']:
                if 'image' in item:
                    item['image'] = File(open(item['image']))
                item_model.objects.create(
                    block=content_block,
                    **item
                )
        if 'related' in block:
            source = apps.get_model(*block['related']['source'].split('.'))
            target = apps.get_model(*block['related']['target'].split('.'))
            for source_object in source.objects.filter(language=lang, **block['related']['filter']):
                fields = dict(
                    (field, getattr(source_object, field)) for field
                    in block['related']['fields']
                )
                target.objects.create(
                    block=content_block,
                    **fields
                )


    page = HomePage.objects.create(pk=1)
    languages = [lang[0] for lang in properties.LANGUAGES]

    for language_code in languages:
        page.translations.create(
            language_code=language_code,
        )

    page_type = ContentType.objects.get_for_model(page)
    placeholder = Placeholder(
        parent_id=page.pk, parent_type_id=page_type.pk, slot='content', role='m'
    )
    placeholder.parent = page
    placeholder.save()

    tenant = Client.objects.get(schema_name=connection.tenant.schema_name)
    with LocalTenant(tenant):
        for lang, blocks in properties.HOMEPAGE.items():
            for (block_type, block) in reversed(blocks):
                create_block(
                    block_type, block, placeholder, lang
                )


class Migration(migrations.Migration):

    dependencies = [
        ('cms', '0047_auto_20171018_1709'),
    ]

    operations = [
        migrations.RunPython(create_homepage)
    ]
