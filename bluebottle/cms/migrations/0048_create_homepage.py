# -*- coding: utf-8 -*-
# Generated by Django 1.10.8 on 2017-10-17 07:57
from __future__ import unicode_literals

from django.db import migrations, models, connection
from django.core.files import File


from bluebottle.clients import properties
from bluebottle.clients.models import Client
from bluebottle.clients.utils import LocalTenant


def create_homepage(apps, schema_editor):
    Placeholder = apps.get_model('fluent_contents', 'Placeholder')
    ContentType = apps.get_model('contenttypes', 'ContentType')
    HomePage = apps.get_model('cms', 'HomePage')
    HomePage.__bases__ = (models.Model, )
    StatsContent = apps.get_model('cms', 'StatsContent')
    Stat = apps.get_model('cms', 'Stat')
    ProjectsContent = apps.get_model('cms', 'ProjectsContent')
    Project = apps.get_model('projects', 'Project')
    ProjectsMapContent = apps.get_model('cms', 'ProjectsMapContent')
    SlidesContent = apps.get_model('cms', 'SlidesContent')
    Slide = apps.get_model('cms', 'Slide')
    StepsContent = apps.get_model('cms', 'StepsContent')
    Step = apps.get_model('cms', 'Step')
    LegacySlide = apps.get_model('slides', 'Slide')
    LegacyStat = apps.get_model('statistics', 'Statistic')
    LogosContent = apps.get_model('cms', 'LogosContent')
    Logo = apps.get_model('cms', 'Logo')
    QuotesContent = apps.get_model('cms', 'QuotesContent')
    Quote = apps.get_model('cms', 'Quote')

    def create_block(block_type, block, placeholder, language):
        model = apps.get_model('cms', block_type)
        content_type = ContentType.objects.get_for_model(model)

        content_block = model.objects.create_for_placeholder(
            placeholder,
            polymorphic_ctype=content_type,  # This does not get set automatically in migrations
            language_code=language,
            **block['kwargs']
        )

        if 'items' in block:
            item_model = apps.get_model('cms', block['items']['model'])
            for item in block['items']['data']:
                if 'image' in item:
                    item['image'] = File(open(item['image']))
                item_model.objects.create(
                    block=content_block,
                    **item
                )
        if 'related' in block:
            source = apps.get_model(*block['related']['source'].split('.'))
            target = apps.get_model(*block['related']['target'].split('.'))
            for source_object in source.objects.filter(language=lang, **block['related']['filter']):
                fields = dict(
                    (field, getattr(source_object, field)) for field
                    in block['related']['fields']
                )
                target.objects.create(
                    block=content_block,
                    **fields
                )


    def create_slides_block(block, placeholder, language):
        content_type = ContentType.objects.get_for_model(SlidesContent)
        block = SlidesContent.objects.create_for_placeholder(
            placeholder,
            polymorphic_ctype=content_type,  # This does not get set automatically in migrations
            language_code=language,
            title=block.get('title'),
            sub_title=block.get('sub_title'),
        )

        for legacy_slide in LegacySlide.objects.filter(language=lang, status='published'):
            slide  = Slide()
            slide.block = block
            slide.title = legacy_slide.title
            slide.body = legacy_slide.body
            slide.image = legacy_slide.image
            slide.background_image = legacy_slide.background_image
            slide.video_url = legacy_slide.video_url
            slide.link_text = legacy_slide.link_text
            slide.link_url = legacy_slide.link_url

            slide.save()

    def create_steps_block(block, placeholder, language):
        content_type = ContentType.objects.get_for_model(StepsContent)
        step_content = StepsContent.objects.create_for_placeholder(
            placeholder,
            polymorphic_ctype=content_type,  # This does not get set automatically in migrations
            language_code=language,
            title=block.get('title'),
            sub_title=block.get('sub_title'),
            action_text=block.get('action_text'),
            action_link=block.get('action_link')
        )

        for step in block['steps']:
            Step.objects.create(
                block=step_content,
                header=step['header'],
                text=step['text'],
                image=File(open(step['image']))
            )

    def create_projects_block(block, placeholder, language):
        content_type = ContentType.objects.get_for_model(ProjectsContent)
        projects_content = ProjectsContent.objects.create_for_placeholder(
            placeholder,
            polymorphic_ctype=content_type,  # This does not get set automatically in migrations
            language_code=language,
            title=block.get('title'),
            sub_title=block.get('sub_title'),
            action_text=block.get('action_text'),
            action_link=block.get('action_link'),
            from_homepage=block.get('from_homepage')
        )

    def create_stats_block(block, placeholder, language):
        content_type = ContentType.objects.get_for_model(StatsContent)
        stats_content = StatsContent.objects.create_for_placeholder(
            placeholder,
            polymorphic_ctype=content_type,  # This does not get set automatically in migrations
            language_code=language,
            title=block.get('title'),
            sub_title=block.get('sub_title'),
        )

        for legacy_stat in LegacyStat.objects.filter(language=lang, active=True):
            Stat.objects.create(
                block=stats_content,
                type=legacy_stat.type,
                title=legacy_stat.title,
                value=legacy_stat.value,
                sequence=legacy_stat.sequence
            )

    def create_logos_block(block, placeholder, language):
        content_type = ContentType.objects.get_for_model(LogosContent)
        logos_content = LogosContent.objects.create_for_placeholder(
            placeholder,
            polymorphic_ctype=content_type,  # This does not get set automatically in migrations
            language_code=language,
            title=block.get('title'),
            sub_title=block.get('sub_title'),
            action_text=block.get('action_text'),
        )

        for logo in block['logos']:
            Logo.objects.create(
                block=logos_content,
                image=File(open(logo))
            )

    def create_quotes_block(block, placeholder, language):
        content_type = ContentType.objects.get_for_model(QuotesContent)
        quotes_content = QuotesContent.objects.create_for_placeholder(
            placeholder,
            polymorphic_ctype=content_type,  # This does not get set automatically in migrations
            language_code=language,
            title=block.get('title'),
            sub_title=block.get('sub_title'),
        )

        for quote in block['quotes']:
            Quote.objects.create(
                block=quotes_content,
                name=quote['name'],
                quote=quote['quote'],
                image=File(open(quote['image']))
            )

    factories = {
        'SlidesContent': create_slides_block,
        'StepsContent': create_steps_block,
        'ProjectsContent': create_projects_block,
        'StatsContent': create_stats_block,
        'LogosContent': create_logos_block,
        'QuotesContent': create_quotes_block,
    }

    page = HomePage.objects.create(pk=1)
    languages = [lang[0] for lang in properties.LANGUAGES]

    for language_code in languages:
        page.translations.create(
            language_code=language_code,
        )

    page_type = ContentType.objects.get_for_model(page)
    placeholder = Placeholder(
        parent_id=page.pk, parent_type_id=page_type.pk, slot='content', role='m'
    )
    placeholder.parent = page
    placeholder.save()

    tenant = Client.objects.get(schema_name=connection.tenant.schema_name)
    with LocalTenant(tenant):
        for lang, blocks in properties.HOMEPAGE.items():
            for (block_type, block) in reversed(blocks):
                create_block(
                    block_type, block, placeholder, lang
                )


class Migration(migrations.Migration):

    dependencies = [
        ('cms', '0047_auto_20171018_1709'),
    ]

    operations = [
        migrations.RunPython(create_homepage)
    ]
